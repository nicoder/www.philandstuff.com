#+TITLE: Introduction to Clojure
#+AUTHOR: Philip Potter and Tom Hall
#+EMAIL: @philandstuff and @thattommyhall
#+OPTIONS: num:nil reveal_history:t reveal_mathjax:nil reveal_control:nil
#+REVEAL_HLEVEL:1
#+REVEAL_MARGIN:0
#+REVEAL_ROOT:../../reveal
#+REVEAL_THEME:simple
#+REVEAL_TRANS:linear

#+BEGIN_NOTES

  - 20 minute whirlwind clojure tour (phil lead)
    - with lighttable instarepl
    - (open lighttable, ctrl-space, type "instarepl")
    - cover everything needed by early stages of clojurescript koans
  - 20 minutes playing with whatever
    - eg clojurescriptkoans
  - 20 minutes intro to harder stuff (phil lead)
    - interop
    - reference types
    - projects
    - dependencies
    - stuff in order to do the next section:
  - 1 hour building snake (tom lead)
    - jvm/swing with seesaw
    - start from bare project
    - gist of functions "for free"
  - outro: what next?
    - plug for all london clojurian events
    - lambda.next & juxt
    - 4clojure
    - gist of documentation sites - grimoire, toolbox, atlas

    - booleans
      - prefix maths
      - keywords, symbols, strings
      - quoting
      - nil
      - cons (lists, seqs)
      - conj
      - peek/pop
      - vectors as seqs
      - vec, vector, nth, subvec
      - sets
      - maps, lookup

      - eval? do we want that?

#+END_NOTES

* Introduction to Clojure

** Concepts

   - Functional programming and immutability
   - Lisp
   - Hosted on JVM (or JavaScript)
   - Concurrency

** Concepts 2

   - "Simple made easy"
   - "Libraries not frameworks"

* Follow along at home with LightTable

http://www.lighttable.com/

** Start a Clojure Instarepl

Type =Ctrl-<SPACE>=, then type ="instarepl"=, and press =<ENTER>=

** 
  :PROPERTIES:
     :reveal_background: /images/start-instarepl.png
     :reveal_background_trans: linear
  :END:

** 
  :PROPERTIES:
     :reveal_background: /images/instarepl.png
     :reveal_background_trans: linear
  :END:


* Lisp part 1

** Basic syntax

Basic expression is an operator applied to zero or more arguments:

#+begin_src clojure
  (operator arg1 arg2 ...)
#+end_src

Sometimes known as an /s-expression/ or /sexp/.

** Function calls

Ruby:

#+begin_src ruby
  puts("foo")
#+end_src

Clojure:

#+begin_src clojure
  (println "foo")
#+end_src

** Methods

Ruby:

#+begin_src ruby
  "".empty?
  "foo".empty?
#+end_src

Clojure:

#+begin_src clojure
  (empty? "")
  (empty? "foo")
#+end_src

** Methods with arguments

Ruby:

#+begin_src ruby
  [1,2,3].concat( [4,5,6] )
#+end_src

Clojure:

#+begin_src clojure
  (concat [1 2 3] [4 5 6])
#+end_src

** Numerical operators

Ruby:

#+begin_src ruby
  1 + 2
  1 + 2 + 3 + 4
#+end_src

Clojure:

#+begin_src clojure
  (+ 1 2)
  (+ 1 2 3 4)
#+end_src

** Defining functions

#+begin_src ruby
  def add1(n)
    n + 1
  end
#+end_src

#+begin_src clojure
  (defn add1 [n]
    (+ n 1))
#+end_src


* Functional programming

** Data

http://clojure.org/data_structures

*** Simple data types

~nil~

~1 1/2 1234N 0.3M~

~"strings"~

~\c \h \a \r \s \!~

~:keyword   'symbol~

*** Vectors

    ~[:a :b :c]~

#+begin_src clojure
  (def v [:a :b :c])

  (first v) ;=> :a

  (last v) ;=> :c

  (nth v 1) ;=> :b
#+end_src


*** Vectors

#+begin_src clojure
  (def v [:a :b :c])

  (conj v :d) ;=> [:a :b :c :d]

  (assoc v 1 42) ;=> [:a 42 :c]

  (pop v) ;=> [:a :b]

  v ;=> [:a :b :c] -- unchanged!
#+end_src

*** Maps

~{:foo 1, :bar 2}~

#+begin_src clojure
  (def m {:foo 1, :bar 2})

  (:foo m) ;=> 1

  (:baz m) ;=> nil

  (get m :baz) ;=> nil

  (get m :baz :not-found) ;=> :not-found
#+end_src

** Defining things

#+begin_src clojure
  (def x :a-value)

  (defn a-function [x y]
    (if (< x y)
      y
      x))

  (def a-function
    (fn [x y]
      (if (< x y)
        y
        x)))

  (let [triple (fn [x] (+ x x x))]
    (triple 5))
  ;;=> 15

  (triple 10)
  ;; unable to resolve symbol: triple
#+end_src

* Clojurescript koans

http://clojurescriptkoans.com

* FP & transforming data

** filter

** map

* reference types & concurrency

** problems with traditional concurrency

   - deadlocks
   - lost updates

** 
  :PROPERTIES:
     :reveal_background: /images/epochal-time-model.png
     :reveal_background_trans: linear
  :END:

** Epochal time model

From Rich Hickey's talk "Are we there yet?" (reference at end, don't
worry)

* Java Interoperability

** Syntax

#+begin_src clojure
  ;; new URI("http://icanhazip.com")
  (def uri (java.net.URI. "http://icanhazip.com"))

  ;; call a method
  (.getScheme uri)
  ;;=> "http"

  ;; Java null maps to Clojure nil
  (.getFragment uri)
  ;;=> nil
#+end_src

** Dealing with mutable objects

#+begin_src clojure
  (def l (ArrayList.))
  (.add l 1)
  (.add l 3)
  (.add l "foobar")
  ;;=> l is now [1 3 "foobar"]
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src clojure
  (def l
    (doto (ArrayList.)
      (.add 1)
      (.add 3)
      (.add "foobar")))
#+end_src

** Clojure collections + Java functions

#+begin_src clojure
;; List's addAll() method takes a java.util.Collection:

(.addAll l [:more :data :from :clojure])

;; now l is [1 3 "foobar" :more :data :from :clojure]
#+end_src

** Java collections + Clojure functions

#+begin_src clojure
  (def l (doto (ArrayList.) (.addAll [1 3 "foobar"])))

  (map str l)
  ;;=> ("1" "3" "foobar")

  (filter number? l)
  ;;=> (1 3)
#+end_src

* Projects and dependencies

#+BEGIN_QUOTE
This is all very neat, but how do I actually get something done?
#+END_QUOTE

** Leiningen

Do you already have this installed? If not, go to http://leiningen.org/

#+begin_src fundamental
  $ cd <working directory>
  $ lein new snake
  Generating a project called snake based on the 'default' template.
  To see other templates (app, lein plugin, etc), try `lein help new`.
  $ cd snake
#+end_src

** project.clj

Edit =snake/project.clj= in LightTable:

#+BEGIN_HTML
<img src="/images/project-clj.png">
#+END_HTML

* References

Rich Hickey, "Are we there yet? "http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey



