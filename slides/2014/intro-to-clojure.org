#+TITLE: Introduction to Clojure
#+AUTHOR: Philip Potter and Tom Hall
#+EMAIL: @philandstuff and @thattommyhall
#+OPTIONS: num:nil reveal_history:t reveal_mathjax:nil reveal_control:nil
#+REVEAL_HLEVEL:1
#+REVEAL_MARGIN:0
#+REVEAL_ROOT:../../reveal
#+REVEAL_THEME:simple
#+REVEAL_TRANS:linear

#+BEGIN_NOTES

  - 20 minute whirlwind clojure tour (phil lead)
    - with lighttable instarepl
    - (open lighttable, ctrl-space, type "instarepl")
    - cover everything needed by early stages of clojurescript koans
  - 20 minutes playing with whatever
    - eg clojurescriptkoans
  - 20 minutes intro to harder stuff (phil lead)
    - interop
    - reference types
    - projects
    - dependencies
    - stuff in order to do the next section:
  - 1 hour building snake (tom lead)
    - jvm/swing with seesaw
    - start from bare project
    - gist of functions "for free"
  - outro: what next?
    - plug for all london clojurian events
    - lambda.next & juxt
    - 4clojure
    - gist of documentation sites - grimoire, toolbox, atlas

    - booleans
      - prefix maths
      - keywords, symbols, strings
      - quoting
      - nil
      - cons (lists, seqs)
      - conj
      - peek/pop
      - vectors as seqs
      - vec, vector, nth, subvec
      - sets
      - maps, lookup

      - eval? do we want that?

  - Concepts

    - Functional programming and immutability
    - Lisp
    - Hosted on JVM (or JavaScript)
    - Concurrency

  - Concepts 2

    - "Simple made easy"
    - "Libraries not frameworks"
#+END_NOTES

* Meta

http://www.philandstuff.com/slides/2014/intro-to-clojure.html

** Structure

About ⅓ presentation, ⅔ practical, 2 hours

First hour: language fundamentals

Second hour: project

** LightTable

http://www.lighttable.com/

** Start a Clojure Instarepl

Type =Ctrl-<SPACE>=

then type ="instarepl"=

press =<ENTER>=

** 
  :PROPERTIES:
     :reveal_background: /images/start-instarepl.png
     :reveal_background_trans: linear
  :END:

** 
  :PROPERTIES:
     :reveal_background: /images/instarepl.png
     :reveal_background_trans: linear
  :END:

** Some useful shortcuts

   - Ctrl-D :: Toggle Clojure documentation for symbol at cursor

* Lisp

** Basic syntax

Basic expression is an operator applied to zero or more arguments:

#+begin_src clojure
  (operator arg1 arg2 ...)
#+end_src

Sometimes known as an /s-expression/ or /sexp/.

** Function calls

Python:

#+begin_src python
  sorted([9,1,6,4])
#+end_src

Clojure:

#+begin_src clojure
  (sort [9 1 6 4])
#+end_src

** Methods

Ruby:

#+begin_src ruby
  "".empty?
  "foo".empty?
#+end_src

Clojure:

#+begin_src clojure
  (empty? "")
  (empty? "foo")
#+end_src

** Methods with arguments

Ruby:

#+begin_src ruby
  [1,2,3].concat( [4,5,6] )
#+end_src

Clojure:

#+begin_src clojure
  (concat [1 2 3] [4 5 6])
#+end_src

** Numerical operators

Ruby:

#+begin_src ruby
  1 + 2
  1 + 2 + 3 + 4
#+end_src

Clojure:

#+begin_src clojure
  (+ 1 2)
  (+ 1 2 3 4)
#+end_src

** Control flow

#+begin_src ruby
  1.upto(10).each do |x|
    puts 2*x
  end
#+end_src

#+begin_src clojure
  (for [i (range 1 10)]
    (* 2 i))
#+end_src


** Defining functions

#+begin_src ruby
  def add1(n)
    n + 1
  end
#+end_src

#+begin_src clojure
  (defn add1 [n]
    (+ n 1))
#+end_src

** Your own syntax...

#+begin_src clojure
  (defroutes my-app
    (GET "/" []
      "Welcome!")
    (GET "/profile/:user" [user]
      (str "Hello, " user "!"))
    (POST "/profile/:user" [user comment]
      (add-to-comments user comment))
    (route/not-found "<h1>Page not found</h1>"))
#+end_src

** Your own syntax...

#+begin_src clojure
  (go-loop [[response-ch request] (<! http-channel)]
    (condp = (:method request)
      :get  (>! response-ch "Hello world!")
      :post (do
              (>! missile-handler :launch)
              (>! response-ch "Missile launch sequence initiated."))))
#+end_src

* Functional programming

** Data

http://clojure.org/data_structures

*** Simple data types

~nil~

~1 1/2 1234N 0.3M~

~"strings"~

~\c \h \a \r \s \!~

~:keyword   'symbol~

*** Vectors

    ~[:a :b :c]~

#+begin_src clojure
  (def v [:a :b :c])

  (first v) ;=> :a

  (last v) ;=> :c

  (nth v 1) ;=> :b
#+end_src


*** Vectors

#+begin_src clojure
  (def v [:a :b :c])

  (conj v :d) ;=> [:a :b :c :d]

  (assoc v 1 42) ;=> [:a 42 :c]

  (pop v) ;=> [:a :b]

  v ;=> [:a :b :c] -- unchanged!
#+end_src

*** Maps

~{:foo 1, :bar 2}~

#+begin_src clojure
  (def m {:few 2, :some 4})

  (get m :few) ;=> 2

  (get m :many) ;=> nil
#+end_src

** Functions

#+begin_src clojure
  (fn [x y]
    (if (< x y)
      y
      x))
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src clojure
  ((fn [x y]
      (if (< x y)
        y
        x))
   12 56) ;=> 56
#+end_src

** Defining functions
#+begin_src clojure
  (def my-max
    (fn [x y]
      (if (< x y)
        y
        x)))

  (my-max 12 56) ;=> 56
#+end_src

** defn shorthand

#+begin_src clojure
  (defn my-max [x y]
    (if (< x y)
      y
      x))

  (my-max 12 56) ;=> 56
#+end_src

** Local names
#+begin_src clojure
  (let [triple (fn [x] (+ x x x))
        x      5]
    (triple x))
  ;;=> 15

  (triple 10)
  ;; unable to resolve symbol: triple
#+end_src

* Clojurescript koans

http://clojurescriptkoans.com

You may find the Clojure Grimoire useful:

http://grimoire.arrdem.com/

* reference types & concurrency

** What's more fundamental?

Classes, objects, locks, threads, variables, inheritance,
encapsulation, dispatch...

#+ATTR_REVEAL: :frag t
Identity, time, values, state, place, perception, visibility...

** Safety

Objects are not thread safe by default

We have to work hard to achieve safety

** Safety

Lost updates:

1. A reads: ~[:jam]~

2. B reads: ~[:jam]~

3. B writes ~[:jam :peanut-butter]~

4. A writes ~[:jam :nutella]~

** Safety

Immutable values and pure functions are safe by default

*But:* not all things we want to talk about are immutable values or
pure functions

** Definitions (From Rich Hickey, "Are We There Yet?")

   - Value :: An /immutable/ magnitude, quantity, number, /or
              immutable composite thereof/ (eg vectors, maps, strings)
   - Identity :: A putative entity we associate with a series of
                 causally related /values/
   - Time :: Relative ordering of causal /values/
   - State :: A /value/ of an /identity/ at a point in /time/

** 
  :PROPERTIES:
     :reveal_background: /images/epochal-time-model.png
     :reveal_background_trans: linear
  :END:

** Atoms

- ~(atom init-val)~ :: creates an atom

- ~(deref a)~ or ~@a~ :: gets current value

- ~(swap! a f x y z)~ :: replaces the current value with ~(f @a x y z)~ /atomically/

** Atoms

#+begin_src clojure
  (def a (atom [:jam]))
#+end_src
#+begin_src clojure
  (swap! a conj :peanut-butter)
#+end_src
#+begin_src clojure
  (swap! a conj :nutella)
#+end_src

** Software Transactional Memory

- ~(ref init-val)~ :: creates a ref

- ~(deref r)~ or ~@r~ :: gets current value

- ~(dosync ...)~ :: performs a transaction over one or more refs

** Software Transactional Memory

Within a transaction:

- ~(ensure r)~ :: coordinated read of a ref

- ~(alter r f x y z)~ :: replace current value of ~r~ with ~(f @r x y z)~

- ~(ref-set r x)~ :: set value of ~r~ to ~x~

** Software Transactional Memory

If a transaction fails due to a concurrent modification, it
automatically retries.

** Software Transactional Memory

#+begin_src clojure
  (def player  (ref #{}))
  (def monster (ref #{:sword :gold :shield}))

  (defn steal-from [thief victim]
    (dosync
      (let [chosen-item (first (shuffle (ensure victim)))]
        (alter victim disj chosen-item)
        (alter thief  conj chosen-item))))

  (steal-from player monster)
#+end_src

** Or are atoms enough?

#+begin_src clojure
  (def world
    (atom {:player  #{}
           :monster #{}}))

  (defn steal-from [world thief victim]
    (let [chosen-item (first (shuffle victim))]
      (-> world
          (update-in [victim] disj chosen-item)
          (update-in [thief]  conj chosen-item))))

  (swap! world steal-from :player :monster)
#+end_src

* Java Interoperability

** Syntax

#+begin_src clojure
  ;; new URI("http://icanhazip.com")
  (def uri (java.net.URI. "http://icanhazip.com"))

  ;; call a method
  (.getScheme uri)
  ;;=> "http"

  ;; Java null maps to Clojure nil
  (.getFragment uri)
  ;;=> nil
#+end_src

** Dealing with mutable objects

#+begin_src clojure
  (def l (ArrayList.))
  (.add l 1)
  (.add l 3)
  (.add l "foobar")
  ;;=> l is now [1 3 "foobar"]
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src clojure
  (def l
    (doto (ArrayList.)
      (.add 1)
      (.add 3)
      (.add "foobar")))
#+end_src

** Clojure collections + Java functions

#+begin_src clojure
;; List's addAll() method takes a java.util.Collection:

(.addAll l [:more :data :from :clojure])

;; now l is [1 3 "foobar" :more :data :from :clojure]
#+end_src

** Java collections + Clojure functions

#+begin_src clojure
  (def l (doto (ArrayList.) (.addAll [1 3 "foobar"])))

  (map str l)
  ;;=> ("1" "3" "foobar")

  (filter number? l)
  ;;=> (1 3)
#+end_src

* transforming data

** filter

** map

* Projects and dependencies

#+BEGIN_QUOTE
This is all very neat, but how do I actually get something done?
#+END_QUOTE

** Leiningen

Do you already have this installed? If not, go to http://leiningen.org/

#+begin_src fundamental
  $ cd <working directory>
  $ lein new snake
  Generating a project called snake based on the 'default' template.
  To see other templates (app, lein plugin, etc), try `lein help new`.
  $ cd snake
#+end_src

** project.clj

Edit =snake/project.clj= in LightTable:

#+BEGIN_HTML
<img src="/images/project-clj.png">
#+END_HTML

* References

Rich Hickey, "Are we there yet? "http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey

ClojureScript Koans: http://clojurescriptkoans.com/



